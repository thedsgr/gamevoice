import { Client, GuildMember } from 'discord.js';
import { PunishmentResult } from '../types/punishmentTypes.js';
import { db, ensureDBInitialized } from '../../../utils/db.js';
import { Logger } from '../../../utils/log.js';
import { formatDuration } from '../../../utils/formatters.js';

/** Adiciona ou atualiza um usu√°rio restrito no banco de dados */
async function upsertRestrictedUser(userId: string, duration: number, reason?: string) {
  ensureDBInitialized();

  const restrictedUsers = db.data!.restrictedUsers || [];
  const existing = restrictedUsers.find((u) => u.userId === userId);

  if (existing) {
    existing.until = Date.now() + duration;
    existing.reason = reason || existing.reason;
  } else {
    restrictedUsers.push({
      userId,
      until: Date.now() + duration,
      reason,
    });
  }

  db.data!.restrictedUsers = restrictedUsers;
  await db.write();
}

export async function applyCommandRestriction(
  target: GuildMember,
  duration: number,
  reason?: string,
  client?: Client
): Promise<PunishmentResult> {
  try {
    // Valida√ß√µes
    if (!target || !(target instanceof GuildMember)) {
      throw new Error('O membro alvo n√£o √© v√°lido.');
    }
    if (typeof duration !== 'number' || duration <= 0) {
      throw new Error('A dura√ß√£o deve ser um n√∫mero maior que zero.');
    }

    // Adiciona ou atualiza a restri√ß√£o no banco de dados
    await upsertRestrictedUser(target.id, duration, reason);

    // Loga a a√ß√£o, se o cliente estiver dispon√≠vel
    if (client) {
      const logger = new Logger();
      await logger.log(
        `Usu√°rio ${target.displayName} foi restrito de comandos. Motivo: ${reason || 'N√£o especificado'}. Dura√ß√£o: ${formatDuration(duration)}`,
        'COMMAND_RESTRICT'
      );
    }

    return {
      success: true,
      message: `üö´ ${target.displayName} restrito de comandos por ${formatDuration(duration)}`,
      duration,
    };
  } catch (error) {
    console.error('‚ùå Erro ao aplicar restri√ß√£o de comandos:', error);
    return {
      success: false,
      message: `‚ùå Falha ao restringir ${target?.displayName || 'usu√°rio desconhecido'}: ${
        error instanceof Error ? error.message : 'Erro desconhecido'
      }`,
    };
  }
}