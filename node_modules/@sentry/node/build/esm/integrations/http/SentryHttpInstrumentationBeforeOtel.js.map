{"version":3,"file":"SentryHttpInstrumentationBeforeOtel.js","sources":["../../../../src/integrations/http/SentryHttpInstrumentationBeforeOtel.ts"],"sourcesContent":["import { VERSION } from '@opentelemetry/core';\nimport { InstrumentationBase, InstrumentationNodeModuleDefinition } from '@opentelemetry/instrumentation';\nimport { flush, logger, vercelWaitUntil } from '@sentry/core';\nimport type * as http from 'node:http';\nimport type * as https from 'node:https';\nimport { DEBUG_BUILD } from '../../debug-build';\nimport { stealthWrap } from './utils';\n\ntype Http = typeof http;\ntype Https = typeof https;\n\n// The reason this \"before OTEL\" integration even exists is due to timing reasons. We need to be able to register a\n// `res.on('close')` handler **after** OTEL registers its own handler (which it uses to end spans), so that we can do\n// something (ie. flush) after OTEL has ended a span for a request. If you think about it like an onion:\n//\n// (Sentry after OTEL instrumentation\n//   (OTEL instrumentation\n//     (Sentry before OTEL instrumentation\n//       (orig HTTP request handler))))\n//\n// registering an instrumentation before OTEL allows us to do this for incoming requests.\n\n/**\n * A Sentry specific http instrumentation that is applied before the otel instrumentation.\n */\nexport class SentryHttpInstrumentationBeforeOtel extends InstrumentationBase {\n  public constructor() {\n    super('@sentry/instrumentation-http-before-otel', VERSION, {});\n  }\n\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public init(): [InstrumentationNodeModuleDefinition, InstrumentationNodeModuleDefinition] {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n\n  /** Get the instrumentation for the http module. */\n  private _getHttpInstrumentation(): InstrumentationNodeModuleDefinition {\n    return new InstrumentationNodeModuleDefinition('http', ['*'], (moduleExports: Http): Http => {\n      // Patch incoming requests\n      stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n      return moduleExports;\n    });\n  }\n\n  /** Get the instrumentation for the https module. */\n  private _getHttpsInstrumentation(): InstrumentationNodeModuleDefinition {\n    return new InstrumentationNodeModuleDefinition('https', ['*'], (moduleExports: Https): Https => {\n      // Patch incoming requests\n      stealthWrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction());\n\n      return moduleExports;\n    });\n  }\n\n  /**\n   * Patch the incoming request function for request isolation.\n   */\n  private _getPatchIncomingRequestFunction(): (\n    original: (event: string, ...args: unknown[]) => boolean,\n  ) => (this: unknown, event: string, ...args: unknown[]) => boolean {\n    return (\n      original: (event: string, ...args: unknown[]) => boolean,\n    ): ((this: unknown, event: string, ...args: unknown[]) => boolean) => {\n      return function incomingRequest(this: unknown, ...args: [event: string, ...args: unknown[]]): boolean {\n        // Only traces request events\n        if (args[0] !== 'request') {\n          return original.apply(this, args);\n        }\n\n        const response = args[1] as http.OutgoingMessage;\n\n        patchResponseToFlushOnServerlessPlatforms(response);\n\n        return original.apply(this, args);\n      };\n    };\n  }\n}\n\nfunction patchResponseToFlushOnServerlessPlatforms(res: http.OutgoingMessage): void {\n  // Freely extend this function with other platforms if necessary\n  if (process.env.VERCEL) {\n    // In some cases res.end does not seem to be defined leading to errors if passed to Proxy\n    // https://github.com/getsentry/sentry-javascript/issues/15759\n    if (typeof res.end === 'function') {\n      let markOnEndDone = (): void => undefined;\n      const onEndDonePromise = new Promise<void>(res => {\n        markOnEndDone = res;\n      });\n\n      res.on('close', () => {\n        markOnEndDone();\n      });\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      res.end = new Proxy(res.end, {\n        apply(target, thisArg, argArray) {\n          vercelWaitUntil(\n            new Promise<void>(finishWaitUntil => {\n              // Define a timeout that unblocks the lambda just to be safe so we're not indefinitely keeping it alive, exploding server bills\n              const timeout = setTimeout(() => {\n                finishWaitUntil();\n              }, 2000);\n\n              onEndDonePromise\n                .then(() => {\n                  DEBUG_BUILD && logger.log('Flushing events before Vercel Lambda freeze');\n                  return flush(2000);\n                })\n                .then(\n                  () => {\n                    clearTimeout(timeout);\n                    finishWaitUntil();\n                  },\n                  e => {\n                    clearTimeout(timeout);\n                    DEBUG_BUILD && logger.log('Error while flushing events for Vercel:\\n', e);\n                    finishWaitUntil();\n                  },\n                );\n            }),\n          );\n\n          return target.apply(thisArg, argArray);\n        },\n      });\n    }\n  }\n}\n"],"names":[],"mappings":"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"}