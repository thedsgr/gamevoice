{"version":3,"file":"mcp-server.js","sources":["../../src/mcp-server.ts"],"sourcesContent":["import { DEBUG_BUILD } from './debug-build';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from './semanticAttributes';\nimport { startSpan } from './tracing';\nimport { logger } from './utils-hoist/logger';\n\ninterface MCPServerInstance {\n  // The first arg is always a name, the last arg should always be a callback function (ie a handler).\n  // TODO: We could also make use of the resource uri argument somehow.\n  resource: (name: string, ...args: unknown[]) => void;\n  // The first arg is always a name, the last arg should always be a callback function (ie a handler).\n  tool: (name: string, ...args: unknown[]) => void;\n  // The first arg is always a name, the last arg should always be a callback function (ie a handler).\n  prompt: (name: string, ...args: unknown[]) => void;\n}\n\nconst wrappedMcpServerInstances = new WeakSet();\n\n/**\n * Wraps a MCP Server instance from the `@modelcontextprotocol/sdk` package with Sentry instrumentation.\n *\n * Compatible with versions `^1.9.0` of the `@modelcontextprotocol/sdk` package.\n */\n// We are exposing this API for non-node runtimes that cannot rely on auto-instrumentation.\nexport function wrapMcpServerWithSentry<S extends object>(mcpServerInstance: S): S {\n  if (wrappedMcpServerInstances.has(mcpServerInstance)) {\n    return mcpServerInstance;\n  }\n\n  if (!isMcpServerInstance(mcpServerInstance)) {\n    DEBUG_BUILD && logger.warn('Did not patch MCP server. Interface is incompatible.');\n    return mcpServerInstance;\n  }\n\n  mcpServerInstance.resource = new Proxy(mcpServerInstance.resource, {\n    apply(target, thisArg, argArray) {\n      const resourceName: unknown = argArray[0];\n      const resourceHandler: unknown = argArray[argArray.length - 1];\n\n      if (typeof resourceName !== 'string' || typeof resourceHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      return startSpan(\n        {\n          name: `mcp-server/resource:${resourceName}`,\n          forceTransaction: true,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            'mcp_server.resource': resourceName,\n          },\n        },\n        () => target.apply(thisArg, argArray),\n      );\n    },\n  });\n\n  mcpServerInstance.tool = new Proxy(mcpServerInstance.tool, {\n    apply(target, thisArg, argArray) {\n      const toolName: unknown = argArray[0];\n      const toolHandler: unknown = argArray[argArray.length - 1];\n\n      if (typeof toolName !== 'string' || typeof toolHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      return startSpan(\n        {\n          name: `mcp-server/tool:${toolName}`,\n          forceTransaction: true,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            'mcp_server.tool': toolName,\n          },\n        },\n        () => target.apply(thisArg, argArray),\n      );\n    },\n  });\n\n  mcpServerInstance.prompt = new Proxy(mcpServerInstance.prompt, {\n    apply(target, thisArg, argArray) {\n      const promptName: unknown = argArray[0];\n      const promptHandler: unknown = argArray[argArray.length - 1];\n\n      if (typeof promptName !== 'string' || typeof promptHandler !== 'function') {\n        return target.apply(thisArg, argArray);\n      }\n\n      return startSpan(\n        {\n          name: `mcp-server/resource:${promptName}`,\n          forceTransaction: true,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'auto.function.mcp-server',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.function.mcp-server',\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n            'mcp_server.prompt': promptName,\n          },\n        },\n        () => target.apply(thisArg, argArray),\n      );\n    },\n  });\n\n  wrappedMcpServerInstances.add(mcpServerInstance);\n\n  return mcpServerInstance as S;\n}\n\nfunction isMcpServerInstance(mcpServerInstance: unknown): mcpServerInstance is MCPServerInstance {\n  return (\n    typeof mcpServerInstance === 'object' &&\n    mcpServerInstance !== null &&\n    'resource' in mcpServerInstance &&\n    typeof mcpServerInstance.resource === 'function' &&\n    'tool' in mcpServerInstance &&\n    typeof mcpServerInstance.tool === 'function' &&\n    'prompt' in mcpServerInstance &&\n    typeof mcpServerInstance.prompt === 'function'\n  );\n}\n"],"names":["DEBUG_BUILD","logger","startSpan","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE"],"mappings":"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"}